{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","util/buffer.ts","util/compat.ts","io/interfaces.ts","io/adapters.ts","flatbuffers/js/flatbuffers.mjs","util/utf8.ts","text-encoding-utf-8/lib/encoding.lib.mjs","buffer/index.js","(webpack)/buildin/global.js","base64-js/index.js","ieee754/index.js","isarray/index.js","fb/Schema.ts","fb/Message.ts","vector.ts","enum.ts","util/bit.ts","visitor.ts","visitor/typecomparator.ts","type.ts","data.ts","util/pretty.ts","builder/valid.ts","builder/buffer.ts","builder.ts","builder/bool.ts","builder/null.ts","builder/date.ts","builder/decimal.ts","builder/dictionary.ts","builder/fixedsizebinary.ts","builder/float.ts","util/bn.ts","builder/int.ts","builder/time.ts","builder/timestamp.ts","builder/interval.ts","builder/binary.ts","builder/utf8.ts","builder/run.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","column.ts","util/args.ts","schema.ts","builder/list.ts","builder/fixedsizelist.ts","builder/map.ts","builder/struct.ts","builder/union.ts","visitor/set.ts","visitor/builderctor.ts","fb/File.ts","builder/index.ts","ipc/metadata/file.ts","io/stream.ts","io/file.ts","util/int.ts","visitor/vectorloader.ts","util/recordbatch.ts","vector/base.ts","vector/binary.ts","vector/bool.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/struct.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","vector/utf8.ts","util/fn.ts","visitor/get.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","ipc/message.ts","visitor/vectorassembler.ts","visitor/jsontypeassembler.ts","visitor/jsonvectorassembler.ts","ipc/writer.ts","table.ts","recordbatch.ts","ipc/reader.ts","io/whatwg/builder.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts","io/whatwg/iterable.ts","io/whatwg/reader.ts","io/whatwg/writer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","memcpy","joinUint8Arrays","toArrayBufferView","toInt8Array","toInt16Array","toInt32Array","toBigInt64Array","toUint8Array","toUint16Array","toUint32Array","toBigUint64Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","toFloat16Array","toArrayBufferViewIterator","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","compareArrayLike","flatbuffers__WEBPACK_IMPORTED_MODULE_0__","_util_utf8__WEBPACK_IMPORTED_MODULE_1__","_compat__WEBPACK_IMPORTED_MODULE_2__","ByteBuffer","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","Uint8Array","buffer","byteOffset","src","Math","min","set","chunks","size","sliced","result","xOffset","yOffset","xLen","yLen","x","y","j","length","collapseContiguousByteRanges","reduce","b","offset","index","Infinity","subarray","slice","ArrayBufferViewCtor","input","bytes","isView","BYTES_PER_ELEMENT","from","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","Uint8ClampedArray","floats","constructor","u16s","pump","iterator","next","ArrayCtor","wrap","buffers","it","done","async","emit","asyncIterator","valueOffsets","a","BigIntCtor","BigIntAvailable","BigInt64ArrayCtor","BigInt64ArrayAvailable","BigUint64ArrayCtor","BigUint64ArrayAvailable","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isWritableDOMStream","isReadableDOMStream","isWritableNodeStream","isReadableNodeStream","_io_interfaces__WEBPACK_IMPORTED_MODULE_0__","BigIntUnavailableError","Error","BigIntUnavailable","asIntN","asUintN","BigInt","BigInt64ArrayUnavailableError","BigInt64Array","[object Object]","BigUint64ArrayUnavailableError","BigUint64Array","isNumber","isBoolean","isFunction","isObject","then","ITERATOR_DONE","ArrowJSON","ReadableInterop","AsyncQueue","_adapters__WEBPACK_IMPORTED_MODULE_0__","freeze","_json","this","schema","batches","dictionaries","_getDOMStream","tee","writable","options","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","super","_values","resolvers","_closedPromise","Promise","_closedPromiseResolve","closed","reason","return","_ensureOpen","push","shift","resolve","_error","error","reject","undefined","_","abort","close","_args","_util_buffer__WEBPACK_IMPORTED_MODULE_0__","fromIterable","cmd","threw","bufferLength","byteRange","isNaN","e","throw","fromAsyncIterable","fromDOMStream","AdaptiveByteReader","releaseLock","fromNodeStream","stream","events","event","err","onEvent","race","map","isFinite","evt","fn","destroy","cleanup","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","read","readInto","handler","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","Buffer","decodeUtf8","encodeUtf8","_buffer__WEBPACK_IMPORTED_MODULE_0__","text_encoding_utf_8__WEBPACK_IMPORTED_MODULE_1__","_Buffer","useNativeEncoders","TextDecoder","TextEncoder","decoder","decode","toString","encoder","encode","inRange","max","ToDictionary","TypeError","end_of_stream","Stream","tokens","endOfStream","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","count","temp","input_stream","code_points","apply","indexOf","cp","codePointsToString","opt_string","string","u","stringToCodePoints","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","array","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","type","data","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","match","join","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","g","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","Schema_org","arrow","apache","org","Message_org","AbstractVector","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","__init","builder","startNull","endNull","Struct_","startStruct_","endStruct_","List","startList","endList","FixedSizeList","listSize","startFixedSizeList","addListSize","endFixedSizeList","Map","keysSorted","startMap","addKeysSorted","endMap","Union","Sparse","typeIdsOffset","numElems","startUnion","addMode","addTypeIds","endUnion","Int","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","startUtf8","endUtf8","Binary","startBinary","endBinary","FixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","startBool","endBool","Decimal","scale","startDecimal","addScale","endDecimal","Date","MILLISECOND","unit","startDate","addUnit","endDate","Time","startTime","endTime","Timestamp","SECOND","optionalEncoding","timezoneOffset","startTimestamp","addTimezone","endTimestamp","Interval","YEAR_MONTH","startInterval","endInterval","Duration","startDuration","endDuration","KeyValue","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DictionaryEncoding","id","indexTypeOffset","isOrdered","startDictionaryEncoding","addId","addIndexType","addIsOrdered","endDictionaryEncoding","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Schema","Little","endianness","fieldsOffset","startSchema","addEndianness","addFields","endSchema","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","DictionaryBatch","dataOffset","isDelta","startDictionaryBatch","addData","addIsDelta","endDictionaryBatch","Message","V1","version","headerType","headerOffset","bodyLength","startMessage","addVersion","addHeaderType","addHeader","addBodyLength","endMessage","BufferType","ArrowType","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","values","xs","begin","context","byteIndex","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","Visitor","nodes","args","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","data_Data","inferDType","type_DataType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","Struct","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","typeId","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","typecomparator_TypeComparator","instance","compareFields","fields","others","every","f","compareField","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","timezone","compareTime","compareUnion","typeIds","children","compareInterval","indices","dictionary","proto","ArrayType","type_Null","type_Int_","type_Float","type_Float16","type_Float32","type_Float64","type_Binary","type_Utf8","type_Bool","type_Decimal","type_Date_","type_DateDay","type_DateMillisecond","type_Time_","type_TimeSecond","type_TimeMillisecond","type_TimeMicrosecond","type_TimeNanosecond","type_Timestamp_","type_TimestampSecond","type_TimestampMillisecond","type_TimestampMicrosecond","type_TimestampNanosecond","type_Interval_","type_IntervalDayTime","type_IntervalYearMonth","type_List","child","valueType","valueField","type_Struct","type_Union_","typeIdToChildIndex","idx","type_DenseUnion","type_SparseUnion","type_FixedSizeBinary","type_FixedSizeList","type_Map_","getId","atomicDictionaryId","type_Dictionary","strideForType","kUnknownNullCount","nullCount","childData","_nullCount","stride","nullBitmap","childStride","_sliceBuffers","clone","_sliceChildren","newLength","VALIDITY","TYPE","OFFSET","DATA","util_buffer","valueOffsetsOrChildren","undf","valueToString","toPrimitive","JSON","stringify","createIsValidFunction","nullValues","fnBody","noNaNs","filter","compat","valueToCase","roundLengthUpToNearest64Bytes","BPE","sliceOrExtendArray","buffer_BufferBuilder","_resize","reservedLength","reservedByteLength","extra","reserved","DataBufferBuilder","reserve","BitmapBufferBuilder","numValid","numInvalid","cur","OffsetsBufferBuilder","flush","buffer_WideBufferBuilder","ArrayType64","buffer64","builder_Builder","nulls","_nulls","_isValid","queueingStrategy","highWaterMark","sizeProperty","numChunks","new","append","toVector","throughIterable","throughAsyncIterable","numChildren","_offsets","_typeIds","setValid","isValid","setValue","_setValue","valid","offsets","last","forEach","builder_FixedWidthBuilder","opts","builder_VariableWidthBuilder","_pendingLength","pending","_pending","current","_flush","pendingLength","_flushPending","bool_BoolBuilder","null_NullBuilder","date_DateBuilder","DateDayBuilder","DateMillisecondBuilder","decimal_DecimalBuilder","dictionary_DictionaryBuilder","dictionaryHashFunction","hashFn","_dictionary","_dictionariesOffset","_keysToIndices","valueToKey","keysToIndices","prev","curr","fixedsizebinary_FixedSizeBinaryBuilder","float_FloatBuilder","Float16Builder","Float32Builder","Float64Builder","isArrowBigNumSymbol","for","BigNum","setPrototypeOf","SignedBigNum","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","signed","words","number","bignumToString","bignumToBigInt","decimalToString","digits","base32","checks","reverse","valueOf","hint","assign","TypedArray","BigIntArray","bn_BN","int_IntBuilder","Int8Builder","Int16Builder","Int32Builder","int_Int64Builder","toBigInt","values64","Uint8Builder","Uint16Builder","Uint32Builder","int_Uint64Builder","memo","time_TimeBuilder","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","timestamp_TimestampBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","interval_IntervalBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","binary_BinaryBuilder","utf8_Utf8Builder","run_Run","kLength","kParent","kRowIndex","columnDescriptor","rowLengthDescriptor","rowParentDescriptor","row_Row","isStruct","props","row_RowProxyGenerator","parent","fieldsAreEnumerable","columnIndex","_bindGetter","rowPrototype","schemaOrFields","keys","schema_Field","getChildAt","rowIndex","bound","clampIndex","adjust","clampRange","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","fns","createArrayLikeComparator","C","createRowComparator","createVectorComparator","createObjectKeysComparator","chunked_Chunked","vectors","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","selectChunkArgs","flatten","VectorName","chunk","isDictionary","_indices","_sliceInternal","columns","_children","vector","vec","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","chunkIndex","fromIndex","slices","chunkOffsets","chunkLength","chunkOffset","to","column_Column","_field","SingleChunkColumn","rest","some","metadata","column","_chunk","selectArgs","Ctor","vals","_selectArgs","selectColumnArgs","_selectFieldArgs","selectFieldArgs","_selectChunkArgs","selectVectorChildrenArgs","_selectVectorChildrenArgs","selectColumnChildrenArgs","_selectColumnChildrenArgs","toKeysAndValues","k","v","entries","fieldIndex","valueIndex","schema_Schema","generateDictionaryMap","compareSchemas","columnNames","names","columnIndices","Boolean","curFields","mergeMaps","newFields","f2","findIndex","newDictionaries","m1","m2","has","list_ListBuilder","_run","run","fixedsizelist_FixedSizeListBuilder","childIndex","map_MapBuilder","struct_StructBuilder","union_UnionBuilder","_valueToChildTypeId","childTypeId","SparseUnionBuilder","union_DenseUnionBuilder","set_SetVisitor","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","getKey","set_instance","builderctor_instance","File_org","newBuilder","defaultOptions","getChildOptions","T","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","startFooter","addSchema","addDictionaries","addRecordBatches","endFooter","metaDataLength","file_Builder","_Block","_Footer","file_Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","numRecordBatches","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","finishFooterBuffer","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","stream_AsyncByteQueue","interfaces","sync","stream_ByteStream","stream_ByteStreamSource","adapters","peek","stream_AsyncByteStream","stream_AsyncByteStreamSource","body","cancel","file_RandomAccessFile","readAt","getInt32","file_AsyncRandomAccessFile","file","_handle","stat","bytesRead","carryBit16","intAsHex","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","int_Uint64","_times","_plus","out_buffer","posn","group","multiple","times","plus","left","right","int_Int64","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","vectorloader_VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","readDictionary","nextBufferRange","vectorloader_JSONVectorLoader","sources","isTimestamp","convertArray","isInt","isTime","isDate","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","noopBuf","nullBufs","bitmapLength","distributeVectorsIntoRecordBatches","vecs","batchArgs","numBatches","batchLength","numColumns","Number","distributeChildData","recordbatch_RecordBatch","uniformlyDistributeChunksAcrossRecordBatches","_changeLengthAndBackfillNullBitmap","base_BaseVector","_bindDataAccessors","isConcatSpreadable","binary_BinaryVector","bool_BoolVector","vectorFromValuesWithType","date_DateVector","DateDayVector","DateMillisecondVector","decimal_DecimalVector","dictionary_DictionaryVector","fixedsizebinary_FixedSizeBinaryVector","fixedsizelist_FixedSizeListVector","float_FloatVector","Float16Vector","Float32Vector","Float64Vector","interval_IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","int_IntVector","is64","Int8Vector","Int16Vector","Int32Vector","int_Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","int_Uint64Vector","_values64","list_ListVector","map_MapVector","rowProxy","_rowProxy","null_NullVector","struct_StructVector","timestamp_TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","time_TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","union_UnionVector","DenseUnionVector","SparseUnionVector","utf8_Utf8Vector","partial0","partial2","get_GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","decimal","getValue","get_instance","indexof_IndexOfVisitor","indexOfValue","searchElement","indexOfNull","indexOfUnion","indexof_instance","iterator_IteratorVisitor","vectorIterator","getFn","nullByte","nullBit","nullableIterator","iterator_instance","toarray_ToArrayVisitor","arrayOfVector","toarray_instance","variableWidthColumnErrorMessage","bytewidth_instance","____","visitFields","vectorctor_instance","newDataType","transform","getByteWidth","wrapNullableSet","VectorCtor","partial1","partialType0","typeassembler_Long","typeassembler_Null","typeassembler_Binary","typeassembler_Bool","typeassembler_Utf8","typeassembler_Decimal","typeassembler_Date","typeassembler_List","typeassembler_Struct","typeassembler_FixedSizeBinary","typeassembler_FixedSizeList","typeassembler_Map_","typeassembler_instance","startTypeIdsVector","createTypeIdsVector","indexType","recordBatchFromJSON","message_RecordBatch","fieldNodesFromJSON","fieldNodes","nullCountFromJSON","buffersFromJSON","BufferRegion","fieldChildrenFromJSON","fromJSON","validity","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","message_Long","message_Builder","message_ByteBuffer","message_Type","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","message_Message","header","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","finishMessageBuffer","_nodes","_buffers","_id","_isDelta","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","dictType","dictMeta","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","platformIsLittleEndian","Big","_schema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","batch","nodesLength","decodeFieldNodes","bufferRegions","buffersLength","decodeBuffers","dictionaryBatch","createFieldNode","setInt16","ipc_message_ByteBuffer","invalidMessageType","nullMessage","invalidMessageMetadata","expected","invalidMessageBodyLength","message_MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","message_AsyncMessageReader","message_JSONMessageReader","_body","_batchIndex","_dictionaryIndex","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","vectorassembler_VectorAssembler","_bufferRegions","assembler","vectorChildren","assembleResult","addBuffer","_nullV","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","jsontypeassembler_JSONTypeAssembler","jsonvectorassembler_JSONVectorAssembler","bigNumsToStrings","binaryToString","octets","toUpperCase","writer_RecordBatchWriter","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","_autoDestroy","autoDestroy","writableStrategy","readableStrategy","writeAll","writeAllAsync","reset","sink","objectMode","_writeFooter","compareTo","_writeSchema","payload","table_Table","recordbatch_InternalEmptyPlaceholderRecordBatch","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","assemble","_writeDictionaries","_writeBodyBuffers","padding","_writeDictionaryBatch","writer_RecordBatchStreamWriter","writer","writer_RecordBatchFileWriter","_writeMagic","writer_RecordBatchJSONWriter","_dictionaries","fieldToJSON","dictionaryBatchToJSON","records","empty","fromMap","fromStruct","tableFromIterable","tableFromAsyncIterable","reader_RecordBatchReader","isSync","open","opening","cols","numCols","getColumnAt","getColumnIndex","nameToIndex","selectAt","columnName","oldToNew","newIdx","_f","_fs","fs","vs","batchData","ensureSameLengthData","recordbatch_DictionaryCollector","collect","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchStreamReader","reader_RecordBatchJSONReaderImpl","fromArrowJSON","AsyncRecordBatchFileReader","reader_AsyncRecordBatchFileReaderImpl","AsyncRecordBatchStreamReader","reader_AsyncRecordBatchStreamReaderImpl","fromFileHandle","RecordBatchFileReader","reader_RecordBatchFileReaderImpl","fromAsyncByteStream","reader_RecordBatchStreamReaderImpl","fromByteStream","readAllSync","readAllAsync","reader_RecordBatchReaderImpl","_recordBatchIndex","_loadVectors","types","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_readFooter","_readDictionaryBatch","seek","builder_BuilderTransform","_numChunks","_finished","_bufferedSize","builderOptions","_controller","_builder","_getSize","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","pull","_maybeFlush","WritableStream","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","Value","Literal","predicate_Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","CustomPredicate","bind_","predicate_lit","predicate_col","and","or","custom","countBy","dataframe_DataFrame","scan","predicate","dataframe_FilteredDataFrame","batchIndex","numRows","count_by","countByteLength","ceil","counts","dataframe_CountByResult","_predicate","util","bn_namespaceObject","util_int_namespaceObject","bit_namespaceObject","util_vector_namespaceObject","predicate_namespaceObject","bm","hwm","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\nexport const toFloat16Array = (input: ArrayBufferViewInput) => {\n    let floats: Float32Array | Float64Array | null = null;\n    if (ArrayBuffer.isView(input)) {\n        switch (input.constructor) {\n            case Float32Array: floats = input as Float32Array; break;\n            case Float64Array: floats = input as Float64Array; break;\n        }\n    } else if (isIterable(input)) {\n        floats = toFloat64Array(input);\n    }\n    if (floats) {\n        const u16s = new Uint16Array(floats.length);\n        for (let i = -1, n = u16s.length; ++i < n;) {\n            u16s[i] = (floats[i] * 32767) + 32767;\n        }\n        return u16s;\n    }\n    return toUint16Array(input);\n};\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* tslint:disable:class-name */\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getSizePrefixedRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getSizePrefixedRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getSizePrefixedRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getSizePrefixedRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getSizePrefixedRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getSizePrefixedRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getSizePrefixedRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getSizePrefixedRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getSizePrefixedRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getSizePrefixedRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getSizePrefixedRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getSizePrefixedRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getSizePrefixedRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getSizePrefixedRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getSizePrefixedRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getSizePrefixedRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getSizePrefixedRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getSizePrefixedRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getSizePrefixedRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getSizePrefixedRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getSizePrefixedRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getSizePrefixedRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSizePrefixedSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset, undefined);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getSizePrefixedRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getSizePrefixedRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getSizePrefixedRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSizePrefixedMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset, undefined);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<T[keyof T]['TValue'] | null> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    constructor(public readonly children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<[${this.children.map((f) => f.type).join(`, `)}]>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<T extends { [key: string]: DataType } = any> extends DataType<Type.Map> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Map_<T extends { [key: string]: DataType } = any> extends DataType<Type.Map, T> {\n    constructor(public readonly children: Field<T[keyof T]>[],\n                public readonly keysSorted: boolean = false) {\n        super();\n    }\n    public get typeId() { return Type.Map as Type.Map; }\n    public toString() { return `Map<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY]) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, _data?: NullBuffer) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data | Vector) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type WideArray<T extends BigIntArray> = T extends BigIntArray ? Int32Array : Uint32Array;\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends BigIntArray> extends BufferBuilder<WideArray<T>, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: T;\n    // @ts-ignore\n    constructor(buffer: T, stride: number) {\n        const ArrayType = buffer instanceof BigInt64Array ? Int32Array : Uint32Array;\n        super(new ArrayType(buffer.buffer, buffer.byteOffset, buffer.byteLength / 4) as WideArray<T>, stride);\n    }\n    public get ArrayType64(): BigIntArrayConstructor<T> {\n        return this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array as any;\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List,\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionariesOffset: number;\n    protected _dictionary: Vector<T['dictionary']> | null;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._dictionary = null;\n        this._nulls = <any> null;\n        this._dictionariesOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionariesOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionariesOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any) {\n        return (typeof val === 'string' ? val : `${val}`) as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmatic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { BigInt64ArrayAvailable, BigInt64Array } from '../util/compat';\nimport { BigUint64ArrayAvailable, BigUint64Array } from '../util/compat';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        if (BigInt64ArrayAvailable) {\n            this._values = <any> new WideBufferBuilder(new BigInt64Array(0), 2);\n        }\n    }\n    public get values64() { return (this._values as any).buffer64 as BigInt64Array; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        if (BigUint64ArrayAvailable) {\n            this._values = <any> new WideBufferBuilder(new BigUint64Array(0), 2);\n        }\n    }\n    public get values64() { return (this._values as any).buffer64 as BigUint64Array; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { MapVector } from '../vector/map';\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { StructVector } from '../vector/struct';\n\n/** @ignore */ export const kLength = Symbol.for('length');\n/** @ignore */ export const kParent = Symbol.for('parent');\n/** @ignore */ export const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const columnDescriptor = { enumerable: true, configurable: false, get: null as any };\n/** @ignore */ const rowLengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\n/** @ignore */ const rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null as any };\n\n/** @ignore */\nexport class Row<T extends { [key: string]: DataType }> implements Iterable<T[keyof T]['TValue']> {\n    [key: string]: T[keyof T]['TValue'];\n    // @ts-ignore\n    public [kParent]: MapVector<T> | StructVector<T>;\n    // @ts-ignore\n    public [kRowIndex]: number;\n    // @ts-ignore\n    public readonly [kLength]: number;\n    *[Symbol.iterator]() {\n        for (let i = -1, n = this[kLength]; ++i < n;) {\n            yield this[i];\n        }\n    }\n    public get<K extends keyof T>(key: K) {\n        return (this as any)[key] as T[K]['TValue'];\n    }\n    public toJSON(): any {\n        return DataType.isStruct(this[kParent].type) ? [...this] :\n            this[kParent].type.children.reduce((props: any, { name }: Field<T[keyof T]>) => {\n                return (props[name] = (this as any)[name]) && props || props;\n            }, {});\n    }\n    public inspect() { return this.toString(); }\n    public [Symbol.for('nodejs.util.inspect.custom')]() { return this.toString(); }\n    public toString() {\n        return DataType.isStruct(this[kParent].type) ?\n            `[ ${[...this].map((x) => valueToString(x)).join(', ')} ]` :\n            `{ ${\n                this[kParent].type.children.reduce((xs: string[], { name }: Field<T[keyof T]>) => {\n                    return [...xs, `\"${name}\": ${valueToString((this as any)[name])}`];\n                }, []).join(', ')\n            } }`\n                ;\n    }\n}\n\n/** @ignore */\nexport class RowProxyGenerator<T extends { [key: string]: DataType }> {\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType }>(parent: MapVector<T> | StructVector<T>, schemaOrFields: T | Field[], fieldsAreEnumerable = false): RowProxyGenerator<T> {\n        let schema: T, fields: Field[];\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        } else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new RowProxyGenerator<T>(parent, fields, fieldsAreEnumerable);\n    }\n\n    private rowPrototype: Row<T>;\n\n    private constructor(parent: MapVector<T> | StructVector<T>, fields: Field[], fieldsAreEnumerable: boolean) {\n        const proto = Object.create(Row.prototype);\n\n        rowParentDescriptor.value = parent;\n        rowLengthDescriptor.value = fields.length;\n        Object.defineProperty(proto, kParent, rowParentDescriptor);\n        Object.defineProperty(proto, kLength, rowLengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            if (!proto.hasOwnProperty(field.name)) {\n                columnDescriptor.enumerable = fieldsAreEnumerable;\n                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));\n                Object.defineProperty(proto, field.name, columnDescriptor);\n            }\n            if (!proto.hasOwnProperty(columnIndex)) {\n                columnDescriptor.enumerable = !fieldsAreEnumerable;\n                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));\n                Object.defineProperty(proto, columnIndex, columnDescriptor);\n            }\n            columnDescriptor.get = null as any;\n        });\n\n        this.rowPrototype = proto;\n    }\n\n    private _bindGetter(columnIndex: number) {\n        return function(this: Row<T>) {\n            const child = this[kParent].getChildAt(columnIndex);\n            return child ? child.get(this[kRowIndex]) : null;\n        };\n    }\n    public bind(rowIndex: number) {\n        const bound: Row<T> = Object.create(this.rowPrototype);\n        bound[kRowIndex] = rowIndex;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Row, kLength } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Array-likes\n    if (Array.isArray(search)) {\n        return createArrayLikeComparator(search);\n    }\n    // Compare Rows\n    if (search instanceof Row) {\n        return createRowComparator(search);\n    }\n    // Compare Vectors\n    if (search instanceof Vector) {\n        return createVectorComparator(search);\n    }\n    // Compare non-empty Objects\n    const keys = Object.keys(search);\n    if (keys.length > 0) {\n        return createObjectKeysComparator(search, keys);\n    }\n    // No valid comparator\n    return () => false;\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(search: ArrayLike<any>) {\n    const n = search.length;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator((search as any)[i]);\n    }\n    return (value: any) => {\n        if (!value) { return false; }\n        // Handle the case where the search element is an Array, but the\n        // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])\n        if (value instanceof Row) {\n            if (value[kLength] !== n) { return false; }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) { return false; }\n            }\n            return true;\n        }\n        if (value.length !== n) { return false; }\n        if (value instanceof Vector) {\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) { return false; }\n            }\n            return true;\n        }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value[i]))) { return false; }\n        }\n        return true;\n    };\n}\n\n/** @ignore */\nfunction createRowComparator(search: Row<any>) {\n    const n = search[kLength];\n    const C = search.constructor as any;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator(search.get(i));\n    }\n    return (value: any) => {\n        if (!(value instanceof C)) { return false; }\n        if (!(value[kLength] === n)) { return false; }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value.get(i)))) { return false; }\n        }\n        return true;\n    };\n}\n\n/** @ignore */\nfunction createVectorComparator(search: Vector<any>) {\n    const n = search.length;\n    const C = search.constructor as any;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator((search as any).get(i));\n    }\n    return (value: any) => {\n        if (!(value instanceof C)) { return false; }\n        if (!(value.length === n)) { return false; }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value.get(i)))) { return false; }\n        }\n        return true;\n    };\n}\n\n/** @ignore */\nfunction createObjectKeysComparator(search: any, keys: string[]) {\n    const n = keys.length;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator(search[keys[i]]);\n    }\n    return (value: any) => {\n        if (!value || typeof value !== 'object') { return false; }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value[keys[i]]))) { return false; }\n        }\n        return true;\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Map_ } from '../type';\n\n/** @ignore */\nexport class MapBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Map_<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const { children, keysSorted } = this.type;\n        const childIndex = this.children.push(child);\n        this.type = new Map_([...children, new Field(name, child.type, true)], keysSorted);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { encodeUtf8 } from '../util/utf8';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = (value * 32767) + 32767; };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!;\n    const { valueOffsets } = vector;\n    let idx = -1, offset = valueOffsets[index];\n    let end = Math.min(offset + value.length, valueOffsets[index + 1]);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setStruct = <\n    S extends { [key: string]: DataType },\n    V extends VectorType<Map_<S>> | VectorType<Struct<S>>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.children.forEach((_field, idx) => {\n        const child = vector.getChildAt(idx);\n        child && child.set(index, value[idx]);\n    });\n};\n\n/** @ignore */\nconst setMap = <\n    S extends { [key: string]: DataType },\n    V extends VectorType<Map_<S>> | VectorType<Struct<S>>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const child = vector.getChildAt(idx);\n        child && child.set(index, value[name]);\n    });\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getSizePrefixedRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSizePrefixedFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset, undefined);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin));\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { Float, Float16, Float32, Float64 } from '../type';\nimport { toFloat16Array, toFloat32Array, toFloat64Array } from '../util/buffer';\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    public static from(this: typeof FloatVector, data: Float16['TArray']): Float16Vector;\n    public static from(this: typeof FloatVector, data: Float32['TArray']): Float32Vector;\n    public static from(this: typeof FloatVector, data: Float64['TArray']): Float64Vector;\n    public static from<T extends Float>(this: typeof FloatVector, data: T['TArray']): V<T>;\n\n    public static from(this: typeof Float16Vector, data: Float16['TArray'] | Iterable<number>): Float16Vector;\n    public static from(this: typeof Float32Vector, data: Float32['TArray'] | Iterable<number>): Float32Vector;\n    public static from(this: typeof Float64Vector, data: Float64['TArray'] | Iterable<number>): Float64Vector;\n    /** @nocollapse */\n    public static from<T extends Float>(data: T['TArray']) {\n        let type: Float | null = null;\n        switch (this) {\n            case Float16Vector: data = toFloat16Array(data); break;\n            case Float32Vector: data = toFloat32Array(data); break;\n            case Float64Vector: data = toFloat64Array(data); break;\n        }\n        switch (data.constructor) {\n            case Uint16Array:  type = new Float16(); break;\n            case Float32Array: type = new Float32(); break;\n            case Float64Array: type = new Float64(); break;\n        }\n        return type !== null\n            ? Vector.new(Data.Float(type, 0, data.length, 0, null, data))\n            : (() => { throw new TypeError('Unrecognized FloatVector input'); })();\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\nimport {\n    toInt8Array, toInt16Array, toInt32Array,\n    toUint8Array, toUint16Array, toUint32Array,\n    toBigInt64Array, toBigUint64Array\n} from '../util/buffer';\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    public static from(this: typeof IntVector, data: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, data: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, data: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, data: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, data: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, data: Uint32Array): Uint32Vector;\n\n    // @ts-ignore\n    public static from(this: typeof IntVector, data: Int32Array, is64: true): Int64Vector;\n    public static from(this: typeof IntVector, data: Uint32Array, is64: true): Uint64Vector;\n    public static from<T extends Int>(this: typeof IntVector, data: T['TArray']): V<T>;\n\n    public static from(this: typeof Int8Vector,   data: Int8['TArray']   | Iterable<number>): Int8Vector;\n    public static from(this: typeof Int16Vector,  data: Int16['TArray']  | Iterable<number>): Int16Vector;\n    public static from(this: typeof Int32Vector,  data: Int32['TArray']  | Iterable<number>): Int32Vector;\n    public static from(this: typeof Int64Vector,  data: Int32['TArray']  | Iterable<number>): Int64Vector;\n    public static from(this: typeof Uint8Vector,  data: Uint8['TArray']  | Iterable<number>): Uint8Vector;\n    public static from(this: typeof Uint16Vector, data: Uint16['TArray'] | Iterable<number>): Uint16Vector;\n    public static from(this: typeof Uint32Vector, data: Uint32['TArray'] | Iterable<number>): Uint32Vector;\n    public static from(this: typeof Uint64Vector, data: Uint32['TArray'] | Iterable<number>): Uint64Vector;\n\n    /** @nocollapse */\n    public static from<T extends Int>(data: T['TArray'], is64?: boolean) {\n        let length: number = 0;\n        let type: Int | null = null;\n        switch (this) {\n            case Int8Vector:   data = toInt8Array(data);   is64 = false; break;\n            case Int16Vector:  data = toInt16Array(data);  is64 = false; break;\n            case Int32Vector:  data = toInt32Array(data);  is64 = false; break;\n            case Int64Vector:  data = toInt32Array(data);  is64 =  true; break;\n            case Uint8Vector:  data = toUint8Array(data);  is64 = false; break;\n            case Uint16Vector: data = toUint16Array(data); is64 = false; break;\n            case Uint32Vector: data = toUint32Array(data); is64 = false; break;\n            case Uint64Vector: data = toUint32Array(data); is64 =  true; break;\n        }\n        if (is64 === true) {\n            length = data.length * 0.5;\n            type = data instanceof Int32Array ? new Int64() : new Uint64();\n        } else {\n            length = data.length;\n            switch (data.constructor) {\n                case Int8Array:   type = new Int8();   break;\n                case Int16Array:  type = new Int16();  break;\n                case Int32Array:  type = new Int32();  break;\n                case Uint8Array:  type = new Uint8();  break;\n                case Uint16Array: type = new Uint16(); break;\n                case Uint32Array: type = new Uint32(); break;\n            }\n        }\n        return type !== null\n            ? Vector.new(Data.Int(type, 0, length, 0, null, data))\n            : (() => { throw new TypeError('Unrecognized IntVector input'); })();\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { RowProxyGenerator } from './row';\nimport { DataType, Map_, Struct } from '../type';\n\n/** @ignore */\nexport class MapVector<T extends { [key: string]: DataType } = any> extends BaseVector<Map_<T>> {\n    public asStruct() {\n        return Vector.new(this.data.clone(new Struct<T>(this.type.children as Field<T[keyof T]>[])));\n    }\n    // @ts-ignore\n    private _rowProxy: RowProxyGenerator<T>;\n    public get rowProxy(): RowProxyGenerator<T> {\n        return this._rowProxy || (this._rowProxy = RowProxyGenerator.new<T>(this, this.type.children || [], true));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { RowProxyGenerator } from './row';\nimport { DataType, Map_, Struct } from '../type';\n\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    public asMap(keysSorted: boolean = false) {\n        return Vector.new(this.data.clone(new Map_<T>(this.type.children as Field<T[keyof T]>[], keysSorted)));\n    }\n    // @ts-ignore\n    private _rowProxy: RowProxyGenerator<T>;\n    public get rowProxy(): RowProxyGenerator<T> {\n        return this._rowProxy || (this._rowProxy = RowProxyGenerator.new<T>(this, this.type.children || [], false));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { decodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => (values[stride * index] - 32767) / 32767;\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getNested = <\n    S extends { [key: string]: DataType },\n    V extends VectorType<Map_<S>> | VectorType<Struct<S>>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.rowProxy.bind(index) as V['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getNested;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =               getNested;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Row } from './row';\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)\n            ).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return addBuffer.call(this, new Uint8Array(0));\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Map_ | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =   assembleNestedVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): { };\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': nullCount <= 0\n                ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return { 'DATA': [] }; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable } from '../util/compat';\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: { autoDestroy: boolean }) {\n        super();\n        this._autoDestroy = options && (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        return this._writePadding(4); // eos bytes\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: { autoDestroy: true }): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: { autoDestroy: true }) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct, Map_ } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { distributeColumnsIntoRecordBatches } from './util/recordbatch';\nimport { distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, MapVector, StructVector } from './vector/index';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Map_<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Map_<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Map_<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T> | Map_<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T> | Map_<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromMap<T extends { [key: string]: DataType } = any>(vector: Vector<Map_<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Map_(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T> | Map_<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Map_) {\n        return Table.fromMap(MapVector.from(input as VectorBuilderOptions<Map_<T>, TNull>));\n    } else if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T> | Map_<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Map_) {\n        return MapVector.from(input as VectorBuilderOptionsAsync<Map_<T>, TNull>).then((vector) => Table.fromMap(vector));\n    } else if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { MapVector } from './vector/index';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Map_, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Map_<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Map_<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends MapVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Map_<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T> | Map_<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T> | Map_<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T> | Map_<T>, TNull> | VectorBuilderOptionsAsync<Struct<T> | Map_<T>, TNull>) {\n        if (isIterable<(Struct<T> | Map_<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T> | Map_<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T> | Map_<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Map_<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Map_<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Map_<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Map(new Map_<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Map_<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Map_<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Map_(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Visitor } from './visitor';\nexport { Schema, Field } from './schema';\nexport {\n    Row,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport {\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './builder/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_bn_ from './util/bn';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"],"sourceRoot":""}