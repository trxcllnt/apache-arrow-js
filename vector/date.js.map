{"version":3,"sources":["vector/date.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;;AAGrB,iCAAoC;AAGpC,mCAAmD;AAEnD,kCAA2D;AAE3D,cAAc;AACd,MAAa,UAAoC,SAAQ,iBAAa;IAKlE,kBAAkB;IACX,MAAM,CAAC,IAAI,CAAiD,KAAkI;QACjM,OAAO,gCAAwB,CAAC,GAAG,EAAE,CAAC,IAAI,sBAAe,EAAO,EAAE,KAAK,CAAC,CAAC;IAC7E,CAAC;CACJ;AATD,gCASC;AAED,cAAc;AACd,MAAa,aAAc,SAAQ,UAAmB;IAKlD,kBAAkB;IACX,MAAM,CAAC,IAAI,CAAc,KAA8I;QAC1K,OAAO,gCAAwB,CAAC,GAAG,EAAE,CAAC,IAAI,cAAO,EAAE,EAAE,KAAK,CAAC,CAAC;IAChE,CAAC;CACJ;AATD,sCASC;AAED,cAAc;AACd,MAAa,qBAAsB,SAAQ,UAA2B;IAKlE,kBAAkB;IACX,MAAM,CAAC,IAAI,CAAc,KAA8J;QAC1L,OAAO,gCAAwB,CAAC,GAAG,EAAE,CAAC,IAAI,sBAAe,EAAE,EAAE,KAAK,CAAC,CAAC;IACxE,CAAC;CACJ;AATD,sDASC","file":"date.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends Date_ = DateMillisecond, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_ = DateMillisecond, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_ = DateMillisecond, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_ = DateMillisecond, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_ = DateMillisecond, TNull = any>(input: Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, input);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {\n    public static from<TNull = any>(input: Iterable<Date | TNull>): DateDayVector;\n    public static from<TNull = any>(input: AsyncIterable<Date | TNull>): Promise<DateDayVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<DateDay, TNull>): Chunked<DateDay>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<DateDay, TNull>): Promise<Chunked<DateDay>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<DateDay, TNull> | VectorBuilderOptionsAsync<DateDay, TNull>) {\n        return vectorFromValuesWithType(() => new DateDay(), input);\n    }\n}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {\n    public static from<TNull = any>(input: Iterable<Date | TNull>): DateMillisecondVector;\n    public static from<TNull = any>(input: AsyncIterable<Date | TNull>): Promise<DateMillisecondVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<DateMillisecond, TNull>): Chunked<DateMillisecond>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<DateMillisecond, TNull>): Promise<Chunked<DateMillisecond>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<DateMillisecond, TNull> | VectorBuilderOptionsAsync<DateMillisecond, TNull>) {\n        return vectorFromValuesWithType(() => new DateMillisecond(), input);\n    }\n}\n"]}